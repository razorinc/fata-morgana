Directory hierarchy
===================

Tentative:
   a. Local user/group created per application :
          uid=<uuid>
          gid=<uuid>
          homedir=/opt/openshift/applications/<uuid>/
      Hierarchy:
        ~/
          app/
             .openshift/     symlinked from  <- ~uuid/configuration/  on flex
                             unused in express for now

          configuration/    symlinked to ->  ~uuid/app/configuration/ on flex
	                    a "real" internal directory on express
               app.env            application environment settings
               php1                     symlink to -> <php1-guid>
               <php1-guid>/       php1 component configuration
                    www-dynamic/        symlink to -> ../<www-dynamic-guid>

               <www-dynamic-guid> www-dynamic configuration
               <secondphp-guid>/  secondphp component configuration
               secondphp                symlink to -> <secondphp-guid>

          repository/     symlink to ->  /var/openshift/repository/<uuid>
          production      symlink to ->  /srv/openshift/<uuid>

   b. Repository created for application
          Location: /var/openshift/repository/<uuid>

   c. Deployment location = /srv/openshift/<uuid>
      Hierarchy:
          app/.openshift/
          configuration/    symlinked to ->  ../app/.openshift/ always

   d. Cartridges installed to /opt/openshift/cartridges/


   Hooks use  ${app.deployment.dir}/configuration except when scaffolding
   is copied over into the application space when adding a cartridge
   (feature) to the application.



Workflow
========
  Workflow (+events+connectors+hooks) and how they tie in together -- this
  is a 'scrappy' first attempt:
  application-create <app-name>*

  add-feature <f-name> [<component-name>|NATIVE]   # optional - called 0-n times
     <install-dependency>
        if native:  yum install native
        else:
           yum install <cartridge-providing-the-requested-feature>
             for all resolved dependencies: run-hook(install) + run-hook(build)

     <resolve-application-descriptor>

  resolve-application-descriptor
     for all dependencies: run-hook(copy-scaffolding)
  deploy-application*
     <resolve-application-descriptor>
     for each component:
        for each cartridge:
           run-hook(configure)
     recursively-establish-connections

  start-stop-application*
     for cartridge in start-or-stop-order:
        run-hook(start|stop)

  delete-application*
     for each component:
        for each cartridge: 
           run-hook(deconfigure)


Calls to cartridge hooks
========================

Tentative:

Interface:   opm run-hook <app|component> <hook-name> [<app>] [<additional-args>

this causes the cartridge hook for the application or associated component 
to be invoked w/ all the environment variables appropriately set and 
the hook itself is passed the application name and guid as parameters.

This will eventually call the application/cartridge hook as:
   $cartridge/$hook $APP_NAME [$APP_GUID "$additional_args"]

cartridge = Cartridge we're working with (php, apache, mysql, etc)
hook = Call to the hook we want (start, stop, deconfigure)
app_name = String name used for messaging (in express $NAME-$DOMAIN)
app_guid = The unique identifier for the app (UUID). Optional.
           This is really needed only if multiple apps resolve to the same
           app_name (will not be the case on express and as of now its a
           flex-only thingy). Ooh, we could also differentiate this based on
           the user name and really need the guid only when the user or the
           executing id is part of multiple groups w/ the same-named apps.
additional_args = any additional args to the hook.

Simplying this so that we can always get the hook "context" using the
application name as the key -- allows for a "hook" to be run directly
and the context/environment to get setup internally.

Environment passed to hooks includes:
   Global Set:
      OPENSHIFT_CONFIG_DIR          #  default: /etc/openshift
      OPENSHIFT_PROFILE             #  express|flex

   App/Cartridge specific:
      OPENSHIFT_APP_GUID
      OPENSHIFT_HOOK_CONTEXT
      OPENSHIFT_APP_HOME_DIR        #  ${HOME}/
      OPENSHIFT_APP_DEV_DIR         #  ${HOME}/development/
      OPENSHIFT_APP_REPO_DIR        #  ${HOME}/repository/
      OPENSHIFT_APP_PROD_DIR        #  ${HOME}/production/

   On a per-hook basis?? This is not needed as of now ...
      OPENSHIFT_APP_BINDADDR        #  internal bind address
                                    #  127.0.*.*  - 'n' (=64) per app.


