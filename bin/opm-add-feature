#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

def usage
    puts <<USAGE
== Synopsis

opm add-feature: Adds a feature (native or openshift) a deployed application

== Usage

opm add-feature APPID FEATURE-NAME ["native"]

Options:
-h|--help:
   Prints this message

APPID: The ID of the application to add the feature to
FEATURE-NAME : The name of the feature, e.g. php-zend
"native" : keyword, conveys whether this is a native-system dependency (e.g. gcc)
USAGE
end

require 'openshift-sdk'

opts = GetoptLong.new(
    ["--porcelin",               GetoptLong::NO_ARGUMENT],
    ["--debug",                  GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
  opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
  usage
  exit -100
end

$opm_debug = true if args['--debug']
$porcelin = args['--porcelin'] ? true : false
app_id = ARGV.shift
feature = ARGV.shift
native = ARGV.shift

if args['--help'] || app_id.nil? || feature.nil?
  usage
  exit -101
end

bucket = Openshift::SDK::Model::ApplicationGidMap.find(app_id)
app = Openshift::SDK::Model::Application.find(app_id,bucket.app_gid) if bucket

if app.nil?
  print "Error: Application(#{app_id}) not found"
  exit -404
end

napp_guid = app.node_application_map[Openshift::SDK::Model::Node.this_node.guid]
napp = Openshift::SDK::Model::NodeApplication.find(napp_guid)
dapp = napp.get_app_from_development_space

# add new feature
if not native.nil? 
  if dapp.requires.nil?
    dapp.requires = [feature]
  else
    if not dapp.requires.include? feature
      dapp.requires << feature
    end
  end
else
  if dapp.requires_feature.nil?
    dapp.requires_feature = [feature]
  else
    if not dapp.requires.include? feature
      dapp.requires_feature << feature
    end
  end
end

napp.save_app_to_development_space dapp

