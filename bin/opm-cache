#!/usr/bin/env ruby
# Copyright 2010 Red Hat, Inc.
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

def usage
    puts <<USAGE
== Synopsis

opm cache: Saves/Fetches values based on given key and id

== Usage

opm cache [read|write|delete] <key,value..>

Options:
-h|--help:
   Prints this message
-i|--id <app_id string>
   Argument representing application id for which to use the cache for
     (not required, will be automatically deduced for application code)
read <key string>:
   Use <key string> as the key to get values
write <key string> <value string>:
   Sets the value against the given key 
delete <key string>:
   Delete the entry for the given key

USAGE
end

require 'openshift-sdk'
require 'openshift-sdk/utils/sqlite_ds'

opts = GetoptLong.new(
    ["--porcelin",               GetoptLong::NO_ARGUMENT],
    ["--debug",                  GetoptLong::NO_ARGUMENT],
    ["--id",               "-i", GetoptLong::REQUIRED_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
    opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
    usage
    exit -100
end

$opm_debug = true if args['--debug']
$porcelin = args['--porcelin'] ? true : false

if args['--help']
  usage
  exit -101
end

def execute_query
    # get the cache instance depending upon the platform
    config = Openshift::SDK::Config.instance
    platform_type = config.get('platform')
    dbinstance = nil
    if platform_type == 'express' or platform_type == nil
        dbinstance = Openshift::SDK::Utils::Sqlite.instance
    else
        # this code does not work yet
        # to be written for Flex/Vostok integration
        #@dbinstance = Openshift::SDK::Utils::FlexDB
        $stderr.puts "Platform #{platform_type} not supported. Check configuration file."
        return nil
    end

    # parse the remaining args to form the query
    command = ARGV.shift
    id = ENV['USER']
    key = nil
    value = nil
    return_value = nil
    case command
        when "read"
            key = ARGV.shift
            if key
                return_value = dbinstance.find(key, id)
            else
                raise
            end
        when "write"
            key = ARGV.shift
            value = ARGV.shift
            if key and value
                return_value = dbinstance.save(key, id, value)
            else
                raise
            end
        when "delete"
            key = ARGV.shift
            if key
                return_value = dbinstance.delete(key, id)
            else
                raise
            end
        else
            raise 
    end # end - case command
    return return_value
end

begin
    query_response = execute_query
    print query_response
rescue Exception => e
    print e, "\n"
    usage
    exit -101
end

